package com.example.premweather

import android.content.Context
import androidx.room.Room
import androidx.test.core.app.ApplicationProvider
import androidx.test.ext.junit.runners.AndroidJUnit4
import com.example.premweather.cache.WeatherDatabase
import com.example.premweather.cache.WeatherDatabaseServiceRoom
import com.example.premweather.domain.City
import com.example.premweather.domain.WeatherState
import kotlinx.coroutines.runBlocking
import org.junit.After
import org.junit.Assert
import org.junit.Assert.assertEquals
import org.junit.Assert.assertNull
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import java.io.IOException
import java.util.concurrent.Executors

@RunWith(AndroidJUnit4::class)
class DatabaseTest {
    private lateinit var db: WeatherDatabase
    private lateinit var dbService: WeatherDatabaseServiceRoom

    @Before
    fun createDb() {
        val context = ApplicationProvider.getApplicationContext<Context>()
        db = Room.inMemoryDatabaseBuilder(
            context,
            WeatherDatabase::class.java
        ).setTransactionExecutor(
            Executors.newSingleThreadExecutor()
        ).build()
        dbService = WeatherDatabaseServiceRoom(db)
    }

    @After
    @Throws(IOException::class)
    fun closeDb() {
        db.close()
    }

    @Test
    @Throws(Exception::class)
    fun insertCity_returnsAutoGeneratedId() {
        runBlocking {
            val city = sampleCity()
            val id = dbService.insertCity(city)
            assertEquals("expected id value 1 but found $id", 1L, id)
        }
    }

    @Test
    @Throws(Exception::class)
    fun getCityByName_returnsInsertedCity() {
        runBlocking {
            val city = sampleCity()
            val id = dbService.insertCity(city)
            city.id = id
            val resultCity = dbService.getCityByName(city.name)
            assertEquals(
                "expected city (${city.name}, ${city.country}) but found (${resultCity?.name}, ${resultCity?.country})",
                city,
                resultCity
            )
        }
    }

    @Test
    @Throws(Exception::class)
    fun getCityByName_returnsNullIfNotExists() {
        runBlocking {
            val city = dbService.getCityByName("Cairo")
            assertNull(city)
        }
    }

    @Test
    @Throws(Exception::class)
    fun getCity_returnsCorrectCity() {
        runBlocking {
            val city = sampleCity()
            val id = dbService.insertCity(city)
            city.id = id
            val resultCity = dbService.getCity(id)
            assertEquals(city, resultCity)
        }
    }

    @Test
    @Throws(Exception::class)
    fun insertCurrentWeather_insertsCityIfNotExists() {
        runBlocking {
            val weatherState = WeatherState(sampleCity())
            val id = dbService.insertCurrentWeather(weatherState)
            val resultCity = dbService.getCity(id)
            assertEquals(weatherState.city.name, resultCity?.name)
        }
    }

    @Test
    @Throws(Exception::class)
    fun insertCurrentWeather_updatesCityIfExists() {
        runBlocking {
            val firstCity = sampleCity()
            val firstCityId = dbService.insertCity(firstCity)
            val weatherState = WeatherState(sampleCity())
            val secondCityId = dbService.insertCurrentWeather(weatherState)
            assertEquals(firstCityId, secondCityId)
            assertNull(dbService.getCity(2))
        }
    }

    @Test
    @Throws(Exception::class)
    fun getCurrentWeather_returnsInsertedCurrentWeather() {
        runBlocking {
            val city = sampleCity()
            dbService.insertCurrentWeather(WeatherState(city, temperature = 27))
            val currentWeather = dbService.getCurrentWeather(city.name)
            assertEquals(27, currentWeather?.temperature)
        }
    }

    @Test
    @Throws(Exception::class)
    fun getCurrentWeather_returnsNullIfNotProvided() {
        runBlocking {
            val city = sampleCity()
            dbService.insertCity(city)
            val currentWeather = dbService.getCurrentWeather(city.name)
            assertNull(currentWeather?.temperature)
        }
    }

    @Test
    @Throws(Exception::class)
    fun insertCurrentWeather_updatesCityCurrentWeatherState() {
        runBlocking {
            val city = sampleCity()
            dbService.insertCity(city)
            val cityWeather = dbService.getCurrentWeather(city.name)
            assertNull(cityWeather?.temperature)
            dbService.insertCurrentWeather(WeatherState(city, temperature = 32))
            val newCityWeather = dbService.getCurrentWeather(city.name)
            assertEquals(32, newCityWeather?.temperature)
        }
    }

    @Test
    @Throws(Exception::class)
    fun insertForecast_insertsCityIfNotExists() {
        runBlocking {
            val city = sampleCity()
            dbService.insertForecast(sampleForecast())
            val createdCity = dbService.getCity(1)
            assertEquals(city.name, createdCity?.name)
        }
    }

    @Test
    @Throws(Exception::class)
    fun getWeatherForecast_returnsInsertedRecords() {
        runBlocking {
            val forecast = sampleForecast()
            val forecastIds = dbService.insertForecast(forecast)
            val resultForecast = dbService.getWeatherForecast(forecast[1].city.name)
            assertEquals(39, resultForecast?.first()?.maxTemperature)
        }
    }

    @Test
    @Throws(Exception::class)
    fun getWeatherForecast_returnsEmptyListIfNotExist() {
        runBlocking {
            val city = sampleCity()
            dbService.insertCity(city)
            val forecast = dbService.getWeatherForecast(city.name)
            assertEquals(emptyList<WeatherState>(), forecast)
        }
    }

    @Test
    @Throws(Exception::class)
    fun getWeatherForecast_returnsNullIfCityNotExist() {
        runBlocking {
            val city = sampleCity()
            val forecast = dbService.getWeatherForecast(city.name)
            assertNull(forecast)
        }
    }

    @Test
    @Throws(Exception::class)
    fun insertForecast_updatesCityIfExists() {
        runBlocking {
            val city = sampleCity()
            val cityId = dbService.insertCity(city)
            val createdCity = dbService.getCity(cityId)
            dbService.insertForecast(sampleForecast())
            val forecast = dbService.getWeatherForecast(city.name)
            assertEquals(forecast?.first()?.city?.name, createdCity?.name)
            assertEquals(23, forecast?.first()?.humidity)
        }
    }

    private fun sampleCity() = City(name = "Cairo", lat = 30.0626, lon = 31.2497, country = "EG")
    private fun sampleForecast() = listOf<WeatherState>(
        WeatherState(
            city = City(name = "Cairo", lat = 30.0626, lon = 31.2497, country = "EG", id = -1),
            date = 1626170400,
            icon = "01d",
            temperature = 0,
            minTemperature = 25,
            maxTemperature = 39,
            humidity = 23, condition = "Clear",
            description = "clear sky",
            probabilityOfPrecipitation = 0.0,
            id = -1
        ),
        WeatherState(
            city = City(name = "Cairo", lat = 30.0626, lon = 31.2497, country = "EG", id = -1),
            date = 1626256800,
            icon = "04d",
            temperature = 0,
            minTemperature = 24,
            maxTemperature = 39,
            humidity = 22,
            condition = "Clouds",
            description = "broken clouds",
            probabilityOfPrecipitation = 0.0,
            id = -1
        )
    )

}











